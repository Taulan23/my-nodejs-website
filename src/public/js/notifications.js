document.addEventListener('DOMContentLoaded', () => {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  let reminders = JSON.parse(localStorage.getItem('carReminders')) || [];
  
  const serviceTypeSelect = document.getElementById('serviceType');
  const customServiceInput = document.getElementById('customService');
  const reminderDateInput = document.getElementById('reminderDate');
  const reminderKmInput = document.getElementById('reminderKm');
  const priorityLevelSelect = document.getElementById('priorityLevel');
  const addReminderBtn = document.getElementById('addReminderBtn');

  // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–æ–ª–µ "–¥—Ä—É–≥–æ–µ"
  serviceTypeSelect.addEventListener('change', () => {
    if (serviceTypeSelect.value === 'custom') {
      customServiceInput.style.display = 'block';
      customServiceInput.required = true;
    } else {
      customServiceInput.style.display = 'none';
      customServiceInput.required = false;
    }
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  addReminderBtn.addEventListener('click', (e) => {
    e.preventDefault();
    
    const serviceType = serviceTypeSelect.value;
    const customService = customServiceInput.value;
    const reminderDate = reminderDateInput.value;
    const reminderKm = reminderKmInput.value;
    const priority = priorityLevelSelect.value;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!serviceType) {
      showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è');
      return;
    }
    
    if (serviceType === 'custom' && !customService.trim()) {
      showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç');
      return;
    }
    
    if (!reminderDate) {
      showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
      return;
    }

    const serviceName = serviceType === 'custom' ? customService.trim() : getServiceName(serviceType);
    const newReminder = {
      id: Date.now(),
      service: serviceName,
      date: reminderDate,
      km: reminderKm || null,
      priority: priority,
      status: 'active',
      created: new Date().toISOString()
    };

    reminders.push(newReminder);
    localStorage.setItem('carReminders', JSON.stringify(reminders));
    
    // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    serviceTypeSelect.value = '';
    customServiceInput.value = '';
    customServiceInput.style.display = 'none';
    reminderDateInput.value = '';
    reminderKmInput.value = '';
    priorityLevelSelect.value = 'low';

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    updateNotificationsList();
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    showSuccessMessage('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
  });

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
  function getServiceName(type) {
    const serviceNames = {
      'to': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
      'oil': '–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞',
      'brakes': '–ó–∞–º–µ–Ω–∞ —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫',
      'tires': '–ó–∞–º–µ–Ω–∞ —à–∏–Ω',
      'battery': '–ó–∞–º–µ–Ω–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞',
      'filters': '–ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤',
      'coolant': '–ó–∞–º–µ–Ω–∞ –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏'
    };
    return serviceNames[type] || type;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  function updateNotificationsList() {
    const notificationsList = document.querySelector('.notifications-list');
    if (!notificationsList) return;

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∫—Ä–æ–º–µ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö)
    const dynamicNotifications = notificationsList.querySelectorAll('.notification-card.dynamic');
    dynamicNotifications.forEach(notification => notification.remove());

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminders.forEach(reminder => {
      if (reminder.status === 'active') {
        const notificationCard = createNotificationCard(reminder);
        notificationsList.appendChild(notificationCard);
      }
    });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  function createNotificationCard(reminder) {
    const card = document.createElement('div');
    card.className = `notification-card ${reminder.priority} dynamic`;
    
    const daysUntil = calculateDaysUntil(reminder.date);
    const emoji = getServiceEmoji(reminder.service);
    
    card.innerHTML = `
      <div class="notification-date">${daysUntil}</div>
      <div class="notification-info">
        <h3>${emoji} ${reminder.service}</h3>
        <p>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${new Date(reminder.date).toLocaleDateString('ru-RU')}</p>
        <div class="notification-details">
          <span class="service-type">${getPriorityText(reminder.priority)}</span>
          <span class="notification-status">–ê–∫—Ç–∏–≤–Ω–æ</span>
        </div>
      </div>
      <button class="notification-action" onclick="completeReminder(${reminder.id})">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</button>
    `;

    return card;
  }

  // –†–∞—Å—á–µ—Ç –¥–Ω–µ–π –¥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  function calculateDaysUntil(dateString) {
    const reminderDate = new Date(dateString);
    const today = new Date();
    const diffTime = reminderDate - today;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) return '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ';
    if (diffDays === 0) return '–°–µ–≥–æ–¥–Ω—è';
    if (diffDays === 1) return '–ó–∞–≤—Ç—Ä–∞';
    if (diffDays < 7) return `${diffDays} –¥–Ω–µ–π`;
    if (diffDays < 30) return `${Math.floor(diffDays / 7)} –Ω–µ–¥.`;
    return `${Math.floor(diffDays / 30)} –º–µ—Å.`;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–µ—Ä–≤–∏—Å–∞
  function getServiceEmoji(service) {
    const emojis = {
      '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ': 'üîß',
      '–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞': 'üõ¢Ô∏è',
      '–ó–∞–º–µ–Ω–∞ —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫': 'üöó',
      '–ó–∞–º–µ–Ω–∞ —à–∏–Ω': 'üõû',
      '–ó–∞–º–µ–Ω–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞': 'üîã',
      '–ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤': 'üå¨Ô∏è',
      '–ó–∞–º–µ–Ω–∞ –æ—Ö–ª–∞–∂–¥–∞—é—â–µ–π –∂–∏–¥–∫–æ—Å—Ç–∏': '‚ùÑÔ∏è'
    };
    return emojis[service] || 'üîß';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  function getPriorityText(priority) {
    const priorities = {
      'low': '–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
      'medium': '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
      'high': '–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'
    };
    return priorities[priority] || priority;
  }

  // –û—Ç–º–µ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ
  window.completeReminder = function(id) {
    const reminderIndex = reminders.findIndex(r => r.id === id);
    if (reminderIndex !== -1) {
      reminders[reminderIndex].status = 'completed';
      reminders[reminderIndex].completedDate = new Date().toISOString();
      localStorage.setItem('carReminders', JSON.stringify(reminders));
      
      updateNotificationsList();
      updateHistoryList();
      showSuccessMessage('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!');
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
  function updateHistoryList() {
    const historyList = document.querySelector('.history-list');
    if (!historyList) return;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    const completedReminders = reminders.filter(r => r.status === 'completed');
    completedReminders.forEach(reminder => {
      const historyItem = document.createElement('div');
      historyItem.className = 'history-item';
      
      historyItem.innerHTML = `
        <div class="history-date">${new Date(reminder.completedDate).toLocaleDateString('ru-RU')}</div>
        <div class="history-info">
          <h4>${reminder.service}</h4>
          <p>–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é</p>
        </div>
        <div class="history-status completed">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      historyList.insertBefore(historyItem, historyList.firstChild);
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
  function showSuccessMessage(message) {
    const successDiv = document.createElement('div');
    successDiv.className = 'success-message';
    successDiv.textContent = message;
    successDiv.style.cssText = `
      position: fixed;
      top: 80px;
      right: 20px;
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
      padding: 15px 25px;
      border-radius: 10px;
      box-shadow: 0 10px 30px rgba(16, 185, 129, 0.3);
      z-index: 10000;
      animation: slideIn 0.3s ease;
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    const style = document.createElement('style');
    style.textContent = `
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
    `;
    document.head.appendChild(style);

    document.body.appendChild(successDiv);

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      successDiv.style.animation = 'slideIn 0.3s ease reverse';
      setTimeout(() => {
        if (document.body.contains(successDiv)) {
          document.body.removeChild(successDiv);
        }
        if (document.head.contains(style)) {
          document.head.removeChild(style);
        }
      }, 300);
    }, 3000);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  function showErrorMessage(message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.textContent = message;
    errorDiv.style.cssText = `
      position: fixed;
      top: 80px;
      right: 20px;
      background: linear-gradient(135deg, #ef4444, #dc2626);
      color: white;
      padding: 15px 25px;
      border-radius: 10px;
      box-shadow: 0 10px 30px rgba(239, 68, 68, 0.3);
      z-index: 10000;
      animation: slideIn 0.3s ease;
    `;

    document.body.appendChild(errorDiv);

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      errorDiv.style.animation = 'slideIn 0.3s ease reverse';
      setTimeout(() => {
        if (document.body.contains(errorDiv)) {
          document.body.removeChild(errorDiv);
        }
      }, 300);
    }, 4000);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫
  const notificationActions = document.querySelectorAll('.notification-action');
  notificationActions.forEach(button => {
    button.addEventListener('click', () => {
      const card = button.closest('.notification-card');
      const title = card.querySelector('h3').textContent;
      
      if (button.textContent === '–í—ã–ø–æ–ª–Ω–µ–Ω–æ') {
        card.style.opacity = '0.5';
        button.disabled = true;
        button.textContent = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úì';
        showSuccessMessage(`"${title}" –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!`);
      }
    });
  });

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã (—Å–µ–≥–æ–¥–Ω—è)
  const today = new Date().toISOString().split('T')[0];
  reminderDateInput.min = today;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  updateNotificationsList();
}); 